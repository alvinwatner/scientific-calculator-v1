{
  "package_name": "com.steve.scientific_calc",
  "project_description": "The scientific_calc project is a comprehensive Flutter application that showcases a scientific calculator with advanced functionality. The app follows the Stacked architecture, leveraging state management, routing, dependency injection, and custom UI components to provide a robust and user-friendly experience.",
  "architecture_overview": "The application's architecture is built upon the Stacked pattern, which promotes separation of concerns and testability. The main components include:\n\n- App: Defines the app structure, including routes, dependencies, bottom sheets, and dialogs. This allows for easy addition of new features.\n- ViewModels: Responsible for managing the state and business logic of the views, following the MVVM (Model-View-ViewModel) pattern.\n- Views: Presentational components that build the user interface based on the state managed by the ViewModels.\n- Services: Encapsulate shared functionality, such as navigation, dialog, and bottom sheet management, using the Stacked Services library.\n- Utilities: Provide common UI helpers and constants for layout, spacing, and responsive design.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing the dialog system and custom dialog UI components in the application. It sets up the necessary infrastructure for displaying various types of dialogs throughout the app, ensuring a consistent and centralized dialog handling mechanism.",
      "class_diagram": "@startuml\nclass DialogType {\n  infoAlert\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nclass InfoAlertDialog {\n  InfoAlertDialog(DialogRequest, DialogCompleter)\n}\n\nDialogService -> InfoAlertDialog : Builds\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Initializes the dialog system by registering custom dialog builders with the DialogService. This allows the app to display various dialog types, such as the InfoAlertDialog, from a centralized location.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the custom bottom sheet UI and functionality in the application. It defines the available bottom sheet types and registers the corresponding sheet builders with the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nenum BottomSheetType {\n  notice\n}\n\ninterface SheetBuilder {\n  +build(BuildContext, SheetRequest, Function(SheetResponse))\n}\n\nclass NoticeSheet {\n  +build(BuildContext, SheetRequest, Function(SheetResponse))\n}\n\nBottomSheetService o-- BottomSheetType\nBottomSheetService o-- SheetBuilder\nNoticeSheet ..|> SheetBuilder\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the different BottomSheetType values. It registers the NoticeSheet builder for the 'notice' bottom sheet type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the 'scientific_calc' Flutter application. It defines the available routes, provides navigation services, and enables seamless navigation between different views.",
      "class_diagram": "@startuml\nclass Routes {\n  + static const homeView: String\n  + static const startupView: String\n  + static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  + List<RouteDef> get routes\n  + Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass NavigatorStateExtension on NavigationService {\n  + Future<dynamic> navigateToHomeView(...)\n  + Future<dynamic> navigateToStartupView(...)\n  + Future<dynamic> replaceWithHomeView(...)\n  + Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen within the application.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:scientific_calc/features/home/home_view.dart",
        "package:scientific_calc/features/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "The `ui_helpers.dart` file provides a set of utility functions and constant widgets that help with the layout and styling of Flutter UI components. It acts as a centralized location for commonly used UI-related functionality, improving code reusability and consistency across the application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  +const double _tinySize\n  +const double _smallSize\n  +const double _mediumSize\n  +const double _largeSize\n  +const double _massiveSize\n\n  +const Widget horizontalSpaceTiny\n  +const Widget horizontalSpaceSmall\n  +const Widget horizontalSpaceMedium\n  +const Widget horizontalSpaceLarge\n\n  +const Widget verticalSpaceTiny\n  +const Widget verticalSpaceSmall\n  +const Widget verticalSpaceMedium\n  +const Widget verticalSpaceLarge\n  +const Widget verticalSpaceMassive\n\n  +Widget spacedDivider\n  +Widget verticalSpace(double height)\n  +double screenWidth(BuildContext context)\n  +double screenHeight(BuildContext context)\n  +double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  +double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  +double halfScreenWidth(BuildContext context)\n  +double thirdScreenWidth(BuildContext context)\n  +double quarterScreenWidth(BuildContext context)\n  +double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  +double getResponsiveSmallFontSize(BuildContext context)\n  +double getResponsiveMediumFontSize(BuildContext context)\n  +double getResponsiveLargeFontSize(BuildContext context)\n  +double getResponsiveExtraLargeFontSize(BuildContext context)\n  +double getResponsiveMassiveFontSize(BuildContext context)\n  +double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny, horizontalSpaceSmall, horizontalSpaceMedium, horizontalSpaceLarge",
          "description": "Provides pre-defined constant Widget instances for adding horizontal spacing of various sizes.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceTiny, verticalSpaceSmall, verticalSpaceMedium, verticalSpaceLarge, verticalSpaceMassive",
          "description": "Provides pre-defined constant Widget instances for adding vertical spacing of various sizes.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "spacedDivider",
          "description": "Provides a pre-defined Widget that combines a vertical space and a divider, useful for separating UI elements.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "Provides a function to create a vertical space of a given height.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth, screenHeight",
          "description": "Provides functions to get the width and height of the current screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction, screenWidthFraction",
          "description": "Provides functions to get a fraction of the current screen's height or width, with optional offset and maximum values.",
          "parameters": [
            "context",
            "dividedBy",
            "offsetBy",
            "max"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth, thirdScreenWidth, quarterScreenWidth",
          "description": "Provides functions to get half, a third, or a quarter of the current screen's width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Provides a function to get a responsive medium-sized horizontal spacing based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize, getResponsiveMediumFontSize, getResponsiveLargeFontSize, getResponsiveExtraLargeFontSize, getResponsiveMassiveFontSize",
          "description": "Provides functions to get responsive font sizes based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Provides a generic function to get a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a notice or message to the user. It is part of the UI layer of the scientific calculator application and provides a reusable way to present important information to the user.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request, Key? key})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class. It takes in a `completer` function and a `request` object, which are used to handle the dismissal of the bottom sheet.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the bottom sheet. It displays the title and description provided in the `request` object, and uses the `NoticeSheetModel` to handle any necessary logic.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method creates an instance of the `NoticeSheetModel`, which is used to handle any business logic or state management required by the `NoticeSheet` widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:scientific_calc/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:scientific_calc/ui/common/app_colors.dart",
        "package:scientific_calc/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. These colors are made available as public variables, allowing other parts of the codebase to easily access and utilize them.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and behavior of the notice bottom sheet in the application. It is a view model that extends the `BaseViewModel` from the `stacked` package, which provides a solid architecture for managing application state and UI logic.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +void showNotice()\n  +void closeNotice()\n}\nNoticeSheetModel .up.> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "closeNotice",
          "description": "Dismisses the notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up and managing the dependency injection (DI) system for the Flutter application. It uses the Stacked Services library to register and provide access to various services throughout the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This is the main method that sets up the DI system. It allows specifying an optional environment and environment filter, and then registers the BottomSheetService, DialogService, and NavigationService as lazy singletons within the Stacked Locator.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is a view model that serves as the foundation for the application's overall state management. It extends the `BaseViewModel` class provided by the `stacked` package, which offers a robust state management solution for Flutter applications.",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\n\nAppViewModel --|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/calculator/calculator_viewmodel.dart",
      "description": "The `CalculatorViewModel` class is responsible for managing the state and logic of a scientific calculator application. It provides the core functionality of the calculator, including handling user input, performing calculations, and displaying the results.",
      "class_diagram": "@startuml\nclass CalculatorViewModel {\n  -String _expression\n  -String _result\n  +String get expression\n  +String get result\n  +void appendNumber(String number)\n  +void appendOperator(String operator)\n  +void appendFunction(String function)\n  +void delete()\n  +void clear()\n  +void calculate()\n}\n\nclass CalculatorService {\n  +String evaluate(String expression)\n}\n\nCalculatorViewModel --> CalculatorService\n@enduml",
      "methods": [
        {
          "name": "appendNumber",
          "description": "Appends a number to the current expression and notifies listeners of the state change.",
          "parameters": [
            "String number"
          ],
          "return_type": "void"
        },
        {
          "name": "appendOperator",
          "description": "Appends an operator to the current expression and notifies listeners of the state change.",
          "parameters": [
            "String operator"
          ],
          "return_type": "void"
        },
        {
          "name": "appendFunction",
          "description": "Appends a function to the current expression and notifies listeners of the state change.",
          "parameters": [
            "String function"
          ],
          "return_type": "void"
        },
        {
          "name": "delete",
          "description": "Removes the last character from the current expression and notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "clear",
          "description": "Clears the current expression and result, then notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "calculate",
          "description": "Evaluates the current expression using the CalculatorService, stores the result, and notifies listeners of the state change.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:scientific_calc/features/calculator/calculator_service.dart",
        "package:scientific_calc/app/app.locator.dart"
      ]
    },
    {
      "name": "lib/features/calculator/calculator_service.dart",
      "description": "The CalculatorService class is responsible for evaluating mathematical expressions, including basic arithmetic operations and scientific functions. It provides a simple and reliable calculator functionality for the application.",
      "class_diagram": "@startuml\nclass CalculatorService {\n  +String evaluate(String expression)\n  -double _evaluateExpression(String expression)\n  -String _handleScientificFunctions(String expression)\n  -String _replaceTrigFunction(String expression, String funcName)\n  -double _evaluateBasicExpression(String expression)\n  -List<String> _tokenize(String expression)\n  -double _parseExpression(List<String> tokens)\n}\n@enduml",
      "methods": [
        {
          "name": "evaluate",
          "description": "Evaluates a mathematical expression and returns the result as a string. Handles basic arithmetic operations and scientific functions such as sin, cos, and tan.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        },
        {
          "name": "_evaluateExpression",
          "description": "Evaluates the given expression by handling scientific functions and then evaluating the basic expression.",
          "parameters": [
            "expression"
          ],
          "return_type": "double"
        },
        {
          "name": "_handleScientificFunctions",
          "description": "Replaces scientific functions (sin, cos, tan) in the expression with their calculated values.",
          "parameters": [
            "expression"
          ],
          "return_type": "String"
        },
        {
          "name": "_replaceTrigFunction",
          "description": "Replaces a specific trigonometric function (sin, cos, tan) in the expression with its calculated value.",
          "parameters": [
            "expression",
            "funcName"
          ],
          "return_type": "String"
        },
        {
          "name": "_evaluateBasicExpression",
          "description": "Evaluates a basic arithmetic expression by tokenizing and parsing the expression.",
          "parameters": [
            "expression"
          ],
          "return_type": "double"
        },
        {
          "name": "_tokenize",
          "description": "Tokenizes the given expression into a list of strings representing numbers, operators, and parentheses.",
          "parameters": [
            "expression"
          ],
          "return_type": "List<String>"
        },
        {
          "name": "_parseExpression",
          "description": "Parses the tokenized expression and evaluates the result.",
          "parameters": [
            "tokens"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math"
      ]
    },
    {
      "name": "lib/features/calculator/widgets/calculator_button.dart",
      "description": "This Dart file defines a custom `CalculatorButton` widget that represents a button in a calculator UI. The widget is responsible for rendering a button with different visual styles and handling user interactions.",
      "class_diagram": "@startuml\nclass CalculatorButton {\n  +String text\n  +VoidCallback onPressed\n  +ButtonType type\n  +_getButtonColor(): Color\n  +_getTextColor(): Color\n  +build(BuildContext): Widget\n}\n\nenum ButtonType {\n  number\n  operator\n  function\n  equals\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the calculator button, applying the appropriate color and text styles based on the button type.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getButtonColor",
          "description": "Determines the background color of the button based on its type.",
          "parameters": null,
          "return_type": "Color"
        },
        {
          "name": "_getTextColor",
          "description": "Determines the text color of the button based on its type.",
          "parameters": null,
          "return_type": "Color"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/calculator/widgets/calculator_display.dart",
      "description": "The CalculatorDisplay class is responsible for rendering the calculator's expression and result in a visually appealing way. It is a key UI component within the calculator feature of the application, providing a clear and concise display of the user's input and the calculated output.",
      "class_diagram": "@startuml\nclass CalculatorDisplay {\n  -String expression\n  -String result\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the calculator display, rendering the expression and result in a visually pleasing layout.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/calculator/calculator_view.dart",
      "description": "The CalculatorView class is responsible for rendering the user interface of a scientific calculator application. It provides a visually appealing and intuitive interface for performing basic arithmetic operations, as well as more advanced functions like trigonometry.",
      "class_diagram": "@startuml\nclass CalculatorView {\n  +builder(BuildContext, CalculatorViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): CalculatorViewModel\n}\n\nclass CalculatorViewModel {\n  +expression: String\n  +result: String\n  +clear(): void\n  +delete(): void\n  +appendNumber(String): void\n  +appendOperator(String): void\n  +appendFunction(String): void\n  +calculate(): void\n}\n\nCalculatorView --> CalculatorViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the calculator view, including the display and the button grid.",
          "parameters": [
            "BuildContext",
            "CalculatorViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides a new instance of the CalculatorViewModel to the CalculatorView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "CalculatorViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "lib/features/calculator/calculator_viewmodel.dart",
        "lib/features/calculator/widgets/calculator_button.dart",
        "lib/features/calculator/widgets/calculator_display.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines an InfoAlertDialog class, which is responsible for displaying an information alert dialog with a title, description, and a button to dismiss the dialog. This dialog is commonly used to provide users with important information or instructions within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n  +builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog -down-> InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the InfoAlertDialog, including the title, description, and a button to dismiss the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel, which encapsulates the view model logic for the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:scientific_calc/ui/common/app_colors.dart",
        "package:scientific_calc/ui/common/ui_helpers.dart",
        "package:scientific_calc/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant CalculatorView\nparticipant CalculatorViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> CalculatorView: Navigate on completion\nCalculatorView -> CalculatorViewModel: Initialize\nUser -> CalculatorView: Interact with calculator\nCalculatorView -> CalculatorViewModel: Handle user actions\nCalculatorViewModel -> CalculatorService: Evaluate expressions\nCalculatorViewModel -> CalculatorView: Update UI\nCalculatorViewModel -> DialogService: Show info dialog\nCalculatorViewModel -> BottomSheetService: Show notice bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, where each view has a corresponding ViewModel that handles the business logic and state. The ViewModels extend the BaseViewModel provided by the Stacked package, which offers reactive state management and notifies the views of state changes.\n\nThe CalculatorViewModel is responsible for managing the state of the calculator, including the current expression, the result, and the various actions the user can perform (append number, operator, function, delete, clear, calculate). The ViewModels leverage the CalculatorService to perform the actual expression evaluation.\n\nThe application also uses the Stacked Services library to manage the state and behavior of the custom dialogs and bottom sheets, such as the InfoAlertDialog and NoticeSheet. These UI components have their own ViewModels that handle the corresponding state and logic.",
  "navigation_flow": "The navigation in the scientific_calc application is handled by the Stacked Router, defined in the app.router.dart file. The router manages the available routes, including the HomeView and StartupView, and provides navigation services to navigate between these views.\n\nThe main entry point of the application is the main.dart file, which sets up the app and runs the AppView. The AppView initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the CalculatorView, which is the main view of the application.\n\nThe navigation between views is achieved through the NavigatorStateExtension provided by the Stacked Services library, which offers methods like `navigateToHomeView()` and `navigateToStartupView()`. This ensures a consistent and centralized navigation management system throughout the application."
}